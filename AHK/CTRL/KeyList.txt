Mouse
---------
 //General Buttons
LButton	Left mouse button
RButton	Right mouse button
MButton	Middle or wheel mouse button
Advanced Buttons
XButton1	4th mouse button. Typically performs the same function as Browser_Back.
XButton2	5th mouse button. Typically performs the same function as Browser_Forward.
Wheel
WheelDown	Turn the wheel downward (toward you).
WheelUp	Turn the wheel upward (away from you).
WheelLeft
WheelRight	
[v1.0.48+]: Scroll to the left or right.

 //Requires Windows Vista or later. These can be used as hotkeys with some (but not all) mice which have a second wheel or support tilting the wheel to either side. In some cases, software bundled with the mouse must instead be used to control this feature. Regardless of the particular mouse, Send and Click can be used to scroll horizontally in programs which support it.

Keyboard
---------
 //Note: The names of the letter and number keys are the same as that single letter or digit. For example: b is the B key and 5 is the 5 key.
 //Although any single character can be used as a key name, its meaning (scan code or virtual keycode) depends on the current keyboard layout. Additionally, some special characters may need to be escaped or enclosed in braces, depending on the context. [v1.1.27+]: The letters a-z or A-Z can be used to refer to the corresponding virtual keycodes (usually vk41-vk5A) even if they are not included in the current keyboard layout.

General Keys:
CapsLock	CapsLock (caps lock key)
Space	Space (space bar)
Tab	Tab (tabulator key)
Enter (or Return)	Enter
Escape (or Esc)	Esc
Backspace (or BS)	Backspace
Cursor Control Keys
ScrollLock	ScrollLock (scroll lock key)
Delete (or Del)	Delete
Insert (or Ins)	Insert
Home	Home
End	End
PgUp	PageUp (page up key)
PgDn	PageDown (page down key)
Up	? (up arrow key)
Down	? (down arrow key)
Left	? (left arrow key)
Right	? (right arrow key)

Numpad Keys
-----------
 //Due to system behavior, the following keys seperated by a slash are identified differently depending on whether NumLock is ON or OFF. 
 //If NumLock is OFF but Shift is pressed, the system temporarily releases Shift and acts as though NumLock is ON.
Numpad0 / NumpadIns	0 / Insert
Numpad1 / NumpadEnd	1 / End
Numpad2 / NumpadDown	2 / ?
Numpad3 / NumpadPgDn	3 / PageDown
Numpad4 / NumpadLeft	4 / ?
Numpad5 / NumpadClear	5 / typically does nothing
Numpad6 / NumpadRight	6 / ?
Numpad7 / NumpadHome	7 / Home
Numpad8 / NumpadUp	8 / ?
Numpad9 / NumpadPgUp	9 / PageUp
NumpadDot / NumpadDel	. / Delete
NumLock	NumLock (number lock key)
NumpadDiv	/ (division)
NumpadMult	* (multiplication)
NumpadAdd	+ (addition)
NumpadSub	- (subtraction)
NumpadEnter	Enter
Function Keys:
F1 - F24	The 12 or more function keys at the top of most keyboards.

Modifier Keys:
LWin	Left Win. Corresponds to the <# hotkey prefix.
RWin	Right Win. Corresponds to the ># hotkey prefix.

Note: Unlike Control/Alt/Shift, there is no generic/neutral "Win" key because the OS does not support it. However, hotkeys with the # modifier can be triggered by either Win key.

Control (or Ctrl)	Control. As a hotkey (Control::) it fires upon release unless it has the tilde prefix. Corresponds to the ^ hotkey prefix.
Alt	Alt. As a hotkey (Alt::) it fires upon release unless it has the tilde prefix. Corresponds to the ! hotkey prefix.
Shift	Shift. As a hotkey (Shift::) it fires upon release unless it has the tilde prefix. Corresponds to the + hotkey prefix.
LControl (or LCtrl)	Left Control. Corresponds to the <^ hotkey prefix.
RControl (or RCtrl)	Right Control. Corresponds to the >^ hotkey prefix.
LShift	Left Shift. Corresponds to the <+ hotkey prefix.
RShift	Right Shift. Corresponds to the >+ hotkey prefix.
LAlt	Left Alt. Corresponds to the <! hotkey prefix.
RAlt	Right Alt. Corresponds to the >! hotkey prefix.

Note: If your keyboard layout has AltGr instead of RAlt, you can probably use it as a hotkey prefix via <^>! as described here. In addition, LControl & RAlt:: would make AltGr itself into a hotkey.

Multimedia Keys
----------------
 //The function assigned to each of the keys listed below can be overridden by modifying the Windows registry. 
 //This table shows the default function of each key on most versions of Windows.

Browser_Back	Back
Browser_Forward	Forward
Browser_Refresh	Refresh
Browser_Stop	Stop
Browser_Search	Search
Browser_Favorites	Favorites
Browser_Home	Homepage
Volume_Mute	Mute the volume
Volume_Down	Lower the volume
Volume_Up	Increase the volume
Media_Next	Next Track
Media_Prev	Previous Track
Media_Stop	Stop
Media_Play_Pause	Play/Pause
Launch_Mail	Launch default e-mail program
Launch_Media	Launch default media player
Launch_App1	Launch My Computer
Launch_App2	Launch Calculator

Other Keys:
AppsKey	Menu. This is the key that invokes the right-click context menu.
PrintScreen	PrintScreen
CtrlBreak	Ctrl+Break
Pause	Pause
Break	Break. Since this is synonymous with Pause, use ^CtrlBreak in hotkeys instead of ^Pause or ^Break.
Help	Help. This probably doesn't exist on most keyboards. It's usually not the same as F1.
Sleep	Sleep. Note that the sleep key on some keyboards might not work with this.
SCnnn	Specify for nnn the scan code of a key. Recognizes unusual keys not mentioned above. See Special Keys for details.
VKnn	
Specify for nn the hexadecimal virtual key code of a key. This rarely-used method also prevents certain types of hotkeys from requiring the keyboard hook. For example, the following hotkey does not use the keyboard hook, but as a side-effect it is triggered by pressing either Home or NumpadHome:

^VK24::MsgBox You pressed Home or NumpadHome while holding down Control.
	//Known limitation: VK hotkeys that are forced to use the keyboard hook, such as *VK24 or ~VK24, will fire for only one of the keys, not both (e.g. NumpadHome but not Home). For more information about the VKnn method, see Special Keys.

	//Warning: Only Send, GetKeyName, GetKeyVK, GetKeySC and #MenuMaskKey support combining VKnn and SCnnn. [v1.1.27+]: The presence of an invalid suffix prevents VKnn from being recognized. For example, vk1Bsc001:: raises an error in v1.1.27+, but sc001 was ignored (had no effect) in previous versions.

Joystick
---------
Joy1 through Joy32: The buttons of the joystick. To help determine the button numbers for your joystick, use this test script. Note that hotkey prefix symbols such as ^ (control) and + (shift) are not supported (though GetKeyState can be used as a substitute). Also note that the pressing of joystick buttons always "passes through" to the active window if that window is designed to detect the pressing of joystick buttons.

	//Although the following Joystick control names cannot be used as hotkeys, they can be used with GetKeyState:
JoyX, JoyY, and JoyZ: The X (horizontal), Y (vertical), and Z (altitude/depth) axes of the joystick.
JoyR: The rudder or 4th axis of the joystick. 
JoyU and JoyV: The 5th and 6th axes of the joystick. 
JoyPOV: The point-of-view (hat) control.
JoyName: The name of the joystick or its driver. 
JoyButtons: The number of buttons supported by the joystick (not always accurate). 
JoyAxes: The number of axes supported by the joystick.
JoyInfo: Provides a string consisting of zero or more of the following letters to indicate the joystick's capabilities: Z (has Z axis), R (has R axis), U (has U axis), V (has V axis), P (has POV control), D (the POV control has a limited number of discrete/distinct settings), C (the POV control is continuous/fine). Example string: ZRUVPD

	//Multiple Joysticks: If the computer has more than one joystick and you want to use one beyond the first, include the joystick number (max 16) in front of the control name. For example, 2joy1 is the second joystick's first button.

//Note: If you have trouble getting a script to recognize your joystick, one person reported needing to specify a joystick number other than 1 even though only a single joystick was present. It is unclear how this situation arises or whether it is normal, but experimenting with the joystick number in the joystick test script can help determine if this applies to your system.



Hand-held Remote Controls
---------------------------
Respond to signals from hand-held remote controls via the WinLIRC client script.

Special Keys
------------------
/*If your keyboard or mouse has a key not listed above, you might still be able to make it a hotkey by using the following steps:
  Ensure that at least one script is running that is using the keyboard hook. You can tell if a script has the keyboard hook by opening its main window and selecting "View->Key history" from the menu bar.
  Double-click that script's tray icon to open its main window.
  Press one of the "mystery keys" on your keyboard.
  Select the menu item "View->Key history"
  Scroll down to the bottom of the page. Somewhere near the bottom are the key-down and key-up events for your key. NOTE: Some keys do not generate events and thus will not be visible here. If this is the case, you cannot directly make that particular key a hotkey because your keyboard driver or hardware handles it at a level too low for AutoHotkey to access. For possible solutions, see further below.
  If your key is detectable, make a note of the 3-digit hexadecimal value in the second column of the list (e.g. 159).
  To define this key as a hotkey, follow this example: */
SC159:: ; Replace 159 with your key's value.
MsgBox, %A_ThisHotkey% was pressed.
return
S?
 //Reverse direction: To remap some other key to become a "mystery key", follow this example:

; Replace 159 with the value discovered above. Replace FF (if needed) with the
; key's virtual key, which can be discovered in the first column of the Key History screen.
#c::Send {vkFFsc159}